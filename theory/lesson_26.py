print('Пользовательские функции. Часть 1\n')

'''
Последовательность инструкций, возвращающая некое значение.
    В функцию могут быть переданы ноль и более аргументов, которые могут использоваться в теле функции.

    Для возврата значения из функции используется инструкция return. Допускается использование 
нескольких return, в том числе для раннего выхода из функции.

    Внутри функций можно определять еще функции.
    Функции можно передавать в качества аргумента в другой функции

    Внимание
Функции без инструкции return (равно как и с нею, но без указания аргумента) всё равно возвращают результат — None.
'''


def hello(name, word):
    print(f'Hello, {name}! Say {word}')


hello('Yiou', 'Hi')  # Hello, Yiou! Say Hi
hello('Xian', 'hello\n')  # Hello, Xian! Say hello


def get_sum(a, b):
    print(a + b)


get_sum(1, 4)  # 5

# То что мы указываем в качестве аргументов(a, b) НИКАК не связано с тем KAK мы вызываем функцию (x, y)
x, y, = 5, 8
get_sum(x, y)  # 13

'''
return:
Хорошей практикой является не печатать результат в функции(print), а взвращать его(return)
return нужен для того что бы получить и сохранить какой-то результат для дальнейшего использования.
Например сумму всех товаров в корзине, функция его считает и сохраняет в переменную. И потом выводит, если надо.
'''


def get_sum(a, b):
    return a + b


get_sum(4, 5)  # в консоли ничего не выведет, надо выводить принтом либо присвоить переменной и её принтовать
print(get_sum(5, 7))  # 12
c = get_sum(3, 8)
print(c, '\n')  # 11


def hi():
    print('Hi\n')


# Если функция уже что то печатает - то вызываем функцию без принта, иначе кроме результата она еще вернет None
# print(hi())  # Hi None
hi()  # Hi

print('Домашнее задание\n')

'''
1. Дан список. Получите новый список, в котором каждое значение будет удвоено:
[1, 2, 3] --> [2, 4, 6]
'''
my_list = [1, 2, 3]


def def_list(arg):
    new_list = [i * 2 for i in arg]
    return new_list


# def_list(my_list)  # эта запись не обязательна, передаем её сразу в принте
print(f'Task 1: new_list = {def_list(my_list)}\n')

'''
2. Дан список. Возведите в квадрат каждый из его элементов и получит сумму всех полученных квадратов:
[1, 2, 3] --> 14 --> 1^2 + 2^2 + 3^2 = 14
'''


def pow_num(arg):
    my_sum = sum(i ** 2 for i in arg)
    return my_sum


print(f'Task 2: my_sum = {pow_num(my_list)}\n')


def str_def(arg):
    if ' ' in arg:
        s = arg.upper()
    else:
        s = arg.lower()
    return s


print(str_def('Hello world'))  # HELLO WORLD
print(str_def('Hello,world'))  # hello,world

# def str_def(s):  # Второй вариант написание функции
#     if ' ' in s:
#         return s.upper()
#     else:
#         return s.lower()
