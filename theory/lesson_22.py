print('Множества\n')

'''
    Множества — неупорядоченные(не поддерживает индексирование) наборы УНИКАЛЬНЫХ объектов, 
поддерживающих хеширование.
    Множества могут быть изменяемыми и неизменяемыми. Размерность и состав созданного однажды неизменяемого 
множества не может меняться, вместо этого обычно создаётся новое множество.

    Множества обычно используются для проверки вхождения элемента, устранения из последовательности дубликатов, 
и таких математических операций как: пересечение, объединение, разница и симметичная разница.

    Множества не упорядочены, они не хранят ни позицию элемента, ни порядок вставки. Поэтому наборы не 
поддерживают ни обращение к элементам по индексам, ни срезы, ни какое-либо другое поведение, 
присущее последовательностям.

    Типы множеств в стандартной библиотеке:
Множество (set) — изменяемый набор. set([iterable])
Статичное множество (frozenset) — неизменяемый набор. frozenset([iterable])

my_set = set() Создание ПУСТОГО множества
'''
# Создание множества с помощью ЛИТЕРАЛА
my_set = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}  # Дубли удалятся
print(type(my_set))
print(my_set)  # {'pear', 'apple', 'banana', 'orange'} Элементы выводятся в рандомном порядке

# Создание множества с помощью КОНСТРУКТОРА
my_set = set('hello')
print(my_set)  # {'l', 'o', 'h', 'e'} Строка разбивается на символы, дубли удаляются, Элементы рандомно

# Создание множества с помощью ГЕНЕРАТОРА
my_set = {i for i in range(1, 11)}
print(my_set)  # {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} Числа выводятся в порядке возрастания и НЕ МЕНЯЮТСЯ

my_set = {4, 7, 2, 7, 9, 5}
print(my_set)

# Удаление дублей из списка:
nums = [1, 2, 3, 3, 6, 7, 4, 9, 1, 2]
nums_2 = list(set(nums))  # Перекинули список в множество, удаляя дубли и потом обратно в список
print(nums_2)  # {1, 2, 3, 4, 6, 7, 9} Получили только уникальные элементы из Списка

'''
Операции над множествами:
'''
a = set('abracadabra')  # {'c', 'd', 'r', 'a', 'b'}
b = set('alacazam')  # {'c', 'l', 'a', 'z', 'm'}
print(a, b, sep='\n')

# Вычетание множеств
c = a - b  # Вычетание - убираем из а все буквы, которые есть в b
print(c)  # {'b', 'd', 'r'}

# Обьединение
d = a | b  # Обьединение - буквы или в а или в b
print(d)  # {'r', 'z', 'l', 'c', 'a', 'b', 'm', 'd'} множества складываются, дубли убираются

# Пересечение
e = a & b  # Пересечение - записываются только дубли
print(e)  # {'a', 'c'}

# симметрическая разность
f = a ^ b  # множество, состоящее только из уникальных элементов исходных множеств. Совпадающие элементы исключаются
print(f, '\n')  # {'r', 'b', 'z', 'm', 'l', 'd'}

'''
Методы для работы со множествами
sets.copy() -> set/frozenset Возвращает поверхностную копию множества. (создается новый элемент)
set.add(el) Добавляет элемент во множество.
set.clear() Удаляет из множества все его элементы.
set.remove(el) Удаляет указанный элемент из множества. Если элемент отсутствует -> KeyError.
set.discard(el) Удаляет указанный элемент из множества, если он там присутствует.
set.pop() Возвращает случайный элемент, удаляя его из множества.

'''
s1 = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}

for i in s1:  # доступ к отдельным элементам множества
    print(i)

# s2 = s1.copy()
# print(s1, id(s1))  # id 2377380244160
# print(s2, id(s2))  # id 2377380245280

s1.add('qwe')
print(s1)

# s1.remove('qwe')
# s1.discard('qwe')
# print(s1)

if 'qwe' in s1:  # Проверить есть ли элемент в последовательности
    print('OK')

print(s1.pop())  # orange
print(s1)  # {'banana', 'qwe', 'pear', 'apple'}

'''
Статичное множество (frozenset) — неизменяемый набор. frozenset([iterable])
Нельзя ничего добавить, удалить и т.д.
'''
a = frozenset('hello')
print('\n', a)  # frozenset({'l', 'e', 'h', 'o'})

