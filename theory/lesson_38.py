from classes import Person

print('Инкапсуляция\n')

'''Инкапсуляция - одна из ключевых вещей в ООП
Инкапсуляция (encapsulation) - это механизм, который объединяет данные и код, манипулирующий зтими данными, 
а также защищает и то, и другое от внешнего вмешательства или неправильного использования. 
Внутри объекта коды и данные могут быть закрытыми (private)
In Python Полной инкапсуляции нет.
'''

person_1 = Person('John')
person_1.print_info()  # Name:  John, Age: 20

person_2 = Person('Mia')
# изменим свойство age вручную:
# person_2.age = 30
# person_2.print_info()  # Name:  Mia, Age: 30
'''
    что бы создать Условно-защищенный атрибут его задают с символом "_". пример _name. Защищен на уровне Соглашений
между программистами. Однако при желании его езменить все равно можно
'''
# person_2._age = 30  # Условно-защищенный атрибут _age
# person_2.print_info()  # Name:  Mia, Age: 30

'''
    что бы избежать такого рода изменний - применяют инкапсуляцию в качестве защиты данных от внешнего вмешательства
А именно атрибуты делают ПРИВАТНЫМИ, с помошью символов "__". Пример "__age". Такой атрибут извне НЕ ИЗМЕНИТЬ

Получить доступ к приватному свойству извне можно с помощью методов геттеры и сеттеры:

'''
person_2.__age = 30  # атрибуты делают ПРИВАТНЫМИ (извне НЕ ИЗМЕНИТЬ)
# print(person_2._Person__age)  # 20

# получили доступ извне к закрытому свойству
# print(person_2.get_age())  # 20

# меняем через сеттер свойство __age на новое, которое задаем здесь. И в принт_инфо он изменится на 35
# person_2.set_age('test')  # Wrong age
# person_2.set_age(101)  # Wrong age
# person_2.set_age(25)  # __age = 25

'''Обращаться к геттеру и сеттеру надо БЕЗ СКОБОК'''
print(person_2.age)  # 20 Вызывается метод Геттер
person_2.age = 18  # Вызывается метод Сеттер

person_2.print_info()  # Name:  Mia, Age: 18
