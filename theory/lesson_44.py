# импортируем модуль для работы с регулярками
import re

print('Регулярные выражения\n')

s = 'Это просто строка текста. А это еще ода строка текста.'
pattern = 'строка'

'''ранне изученые способы поиска по строке:'''
# print(s.find(pattern))  # строка найдена, начинается с 11 символа
# print(pattern in s)  # True

'''
    Регулярки:
    
    Функция search:
- используется для поиска подстроки, которая соответствует шаблону
- возвращает объект Match, если подстрока найдена
- возвращает None, если подстрока не найдена

Функция search подходит в том случае, когда надо найти только одно совпадение в строке, например, когда 
регулярное выражение описывает всю строку или часть строки.
'''
if re.search(pattern, s):
    print('matched')
else:
    print('No matched')

# Раз функция возвращает какой то обьект то её можно присвоить переменной:
test = re.search(pattern, s)
print(test)  # <re.Match object; span=(11, 17), match='строка'>
print(test.span())  # (11, 17) получили кортеж позиции элементов начала и конца строки
print(test.start())  # 11
print(test.end(), '\n')  # 17

"""
    Функция match():

- используется для поиска в начале строки подстроки, которая соответствует шаблону
- возвращает объект Match, если подстрока найдена
- возвращает None, если подстрока не найдена

Функция match отличается от search тем, что match всегда ищет совпадение в начале строки.
"""
print(re.match(pattern, s), '\n')  # None так как подстрока pattern находится не в начале строки s
# pattern = 'Это'
# print(re.match(pattern, s))  # <re.Match object; span=(0, 3), match='Это'>

"""
 Функция findall():

- используется для поиска всех непересекающихся совпадений в шаблоне
- возвращает:
    список строк, которые описаны регулярным выражением, если в регулярном выражении нет групп
    список строк, которые совпали с регулярным выражением в группе, если в регулярном выражении одна группа
    список кортежей, в которых находятся строки, которые совпали с выражением в группе, если групп несколько
"""
print(re.findall(pattern, s), '\n')  # ['строка', 'строка']

"""
    Функция re.split

Функция split работает аналогично методу split в строках, но в функции re.split можно использовать 
регулярные выражения, а значит, разделять строку на части по более сложным условиям.

    Аргументы 1 - разделитель, 2 - строка для поискаб 3 - колличество разделений
"""
print(re.split(r'\.', s, 1), '\n')  # ['Это просто строка текста', ' А это еще ода строка текста']
'''
    Префикс r обозначает неформатируемые (или необрабатываемые) строки, в которых подавляется 
действие символов экранирования.
'''

"""
    Примеры работы с регулярками:
"""

s = '''Это просто строка текста.
А это ещё одна строка текста.
А это строка с цифрами: 1, 2, 3, 4, 5, 6, 7, 8, 9, ٣, 0, 10
А это строка с разными символами: "!", "@", "-", "&", "?", "_"
a\\b\tc
test string'''

















# pattern = r'\w+'
# pattern = r'[а-яё]+'
# pattern = r'[0-9]+'
# pattern = r'\d+'
# pattern = r'[\da-]+'
# pattern = r'a\\b\tc'
# pattern = r'\w+$'

# print(re.findall(pattern, s, flags=re.IGNORECASE))

# mail@mail.com
# kudlay@bank
# mail@google.com.ua


# def validate_email(email):
#     return re.match(r'^.+@(\w+\.){0,2}[a-z]{2,6}$', email, re.IGNORECASE)
#
#
# print(validate_email('mail@mail.com'))
# print(validate_email('ivanov@bank'))
# print(validate_email('mail@google.com.ua'))
# print(validate_email('mail@google.com.infotest'))