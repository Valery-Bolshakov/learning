print('Генераторы списков\n')

'''Генераторы списков [выражение for переменная in коллекция if условие]

new_list = [ <expression> for <element> in <iterable> ]

Также есть необязательное условие if:
new_list = [ <expression> for <element> in <iterable> if <condition> ]

# Каждый <element> в <iterable> подключается к <expression> если (необязательно) <условие> имеет 
значение true . Все результаты сразу возвращаются в новый список.


my_generator = [i [*2] for i in range(10) [if i != '5']] # операция с 'i' и условие [if] не обязательно
my_generator = [i*i for i in my_list [if i is not ' ']]

my_sum = sum(i*i for i in range(10))  # сумма квадратов 0, 1, 4, ... 81

Списковые включения могут использовать вложенные итерации по переменным:
[(x, y) for x in range(1, 10) for y in range(1, 10) if x % y == 0]'''

'''
Примеры
# списковое включение, выдаёт [2, 3, 4]
[x + 1 for x in (1, 2, 3)]

# списковое включение с фильтром выдаёт [2]
[x for x in (1, 2, 3) if x % 2 == 0]

# списковое включение с тройкой
[x + 1 if x % 2 == 0 else x for x in (1, 2, 3)]

# списковое включение с тройкой и фильтрацией
[x + 1 if x % 2 == 0 else x for x in range(-3,4) if x > 0]

# комплект выражений, выдаёт {1, 2, 3}
{x for x in (1, 2, 2, 3)}

# словарь включений, выдаёт {'a': 1, 'b': 2} (python 2.7+ and 3.0+ only)
{k: v for k, v in [('a', 1), ('b', 2)]}

# Вложенные циклы, дает [11, 21, 12, 22]
[x + y for x in [1, 2] for y in [10, 20]]

# Состояние проверено на 1-й петле
[x + y for x in [1, 2, 3] if x > 2 for y in [3, 4, 5]]

# Состояние проверено на 2-й петле
[x + y for x in [1, 2, 3] for y in [3, 4, 5] if x > 2]

# Условие проверено, если зацикленные числа нечётные
[x for x in xrange(10) if x % 2 == 0]
'''

# j3 = [i for i in 'hello world' if i != ' ']

j3 = [i for i in 'hello world' if i not in ['a', 'e', 'o', 'u', ' ']]
# Проитерируйся и выведи все символи, если они не равны символам из заданной последовательности(not in)
print(j3)

j3 = [i * 2 for i in 'hello world' if i not in ['a', 'e', 'o', 'u', ' ']]
# можно с i что нибдуь делать, например умножить на 2 и получить дубли символо
print(j3)
