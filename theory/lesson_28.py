print('Пользовательские функции. Часть 3\n')


# Комментирование функций:
def get_sum(a, b):
    """
    Описание функции. например: Возвращает сумму аргументов a и b.
    эту строку оставляют пустой.
    Далее следует один или более параграфов подробного описания функции, если это необходимо.
    :param a: Первый операнд (описание параметров)
    :type a: int
    :param b: Второй операнд (описание параметров)
    :type b: int
    :return: То что возвращает функция
    """
    return a + b


print(get_sum(1, 2))

'''
Облости видимости в Python: Локальная и Глобальная.
Область видимости определяет контекст переменной в рамках которого её можно использовать.
    ЛОКАЛЬНЫЕ - ВСЕ переменные которые мы определяем ВНУТРИ функции
    ГЛОБАЛЬНЫЕ - ВСЕ переменные которые мы определяем СНАРУЖИ функции
'''


def f():
    x = 5  # локальная, видна только внутри функции
    # c += 1  # выдаст ошибку
    print(c)  # глобальная, определили вне функции но тет тоже доступна
    # Глобальные переменные Внутри функции доступны только ДЛЯ ЧТЕНИЯ


# print(x)  # выдаст ошибку
c = 5
f()


def f1():
    c = 10  # LOCAL
    c += 1  # тут уже код заработает так как работаем с локальной переменной
    print(c)


print(c)  # global
f1()
print(c)  # global

'''Выполнение функций создает новую таблицу обозначений где хранятся локальные переменные.
При обращении к переменной внутри функции - сперва её значение ищется в локальной таблице.
И если не найдено то ищется в глобальных(внешних) таблицах'''


def f2():
    global c  # Если указать свойство global то переменная станет доступной для чтения и ЗАПИСИ
    c += 1  # значение глобальной переменной изменится +1
    print(c)


print(c)  # 5
f2()  # 6
print(c)  # 6

'''
Функции могут возвращать любые обьекты(списки, кортежи....другие функции)
Внутри функции можно описать ЕЩЕ ОДНУ ФУНКЦИЮ и это будет работать
'''
l = [1, '2', 3]


def func_l(l):
    return [i * 2 for i in l]


print(func_l(l))


#  ОЧЕНЬ полезный и удобный шаблон для функций
def f2(l):
    """
    Данная функцию удобна тем что в 'get_mult' можно написать любую нужную нам функцию, совершить любые действия.
    И вызвать ее для каждого элемента 'i' в конструкции 'return [get_mult(i) for i in l]'
    """

    def get_mult(x):
        return int(x) * 2  # Приводим все к числовому значению

    return [get_mult(i) for i in l]  # для каждого элемента списка l - вызываем функцию get_mult


print(f2(l))  # [2, 4, 6]


# Еще пример удобного шаблона для функций
def f3(l):
    def get_mult(x):
        if isinstance(x, int):  # isinstance проверит является ли x типом int, если ДА то выполнится return
            # если НЕТ то вернет None, а None приводится к False
            return x * 2

    return [get_mult(i) for i in l if get_mult(i)]  # выводим i для каждого элемента, Если get_mult(i) == True


print(f3(l))  # [2, 6]


# Еще пример удобного шаблона для функций
def f4(l):
    def get_mult(x):
        return x * 2

    return list(map(get_mult, l))  # Для каждого элемента списка применится функция get_mult


print(f4(l))  # [2, '22', 6]
