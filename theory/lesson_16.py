print('Методы для работы со списками:\n')

'''
list.append(x) - Добавляет элемент в конец списка
list.extend(L) - Расширяет список list, добавляя в конец все элементы объекта L. L: Объект, поддерживающий итерирование
list.insert(i, x) - Вставляет элемент в список на указанную позицию (сдвигая остальные элементы вправо). 
    i: Позиция (индекс). x: Элемент
list.remove(x) - Удаляет первый элемент в списке, имеющий значение x. ValueError, если такого элемента не существует
list.pop([i]) - Удаляет i-ый элемент из списка и возвращает его. Если индекс не указан, удаляется последний элемент
list.index(x, [start [, end]]) - Возвращает положение первого элемента со значением x (при этом поиск ведется 
    от start до end). ValueError, значение отсутствует в последовательности.
list.count(x) - Возвращает количество элементов со значением x
list.sort([key=функция], [reverse=False]) - Сортирует список на основе функции
list.reverse() - Разворачивает список
list.copy() - Возвращает копию списка
list.clear() - Очищает список
'''

my_l = [1, 2, 3, 'hello', ['test', 9], 'world', True]

# name = ['Ivanov', 'Petrov', 'Sidorov']
# print(len(my_l))  # колличество элементов списка
# print(name[0])
# print(my_l[4])
# print(my_l[4][0])

'''Списки поддерживают работу со резами. Срез возвращает новый список который можно сохранить в новую переменную:'''
my_l1 = my_l[0:3]
print(my_l1)

# Списки являются изменяемыми последовательностями:
my_l[2] = 'New'
print(my_l)  # заменили третий элемент списка

# Можно заменить сразу несколько элементов списка используя последовательности(срезы)
# my_l[:2] = [10, 15]
# print(my_l)  # заменили первые на элемента списка

'''Рассмотрим различные методы:'''
my_l.append('new')
print(my_l)

my_l.extend([5, 7])
print(my_l)
# l2 = ['hi', 19]
# my_l += l2  # простой вариант сложения 2х списков
# print(my_l)

my_l.insert(1, 'hi')
print(my_l)

my_l.remove('New')
print(my_l)

el = my_l.pop(1)
print(my_l)
print(el)

print(my_l.index('new'))

print(my_l.count(5))

l3 = ['hello', 'world', 'name', 'time']
l3.sort()  # без указания функции сортирует по алфавиту
print(l3)
