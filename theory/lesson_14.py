print('Списки:\n')

'''
Список — изменяемая последовательность с упорядоченными элементами. Элементами списков могут выступать любые объекты.

Варианты создания списков:
my_empty_list = []
my_empty_list = list()
    s = 'hello'
    my_l = list(s)  # ['h', 'e', 'l', 'l', 'o']
my_list = [1, 'some', 3.5]
my_list = list(i for i in range(3))  # [0, 1, 2] Генератор списков
'''

j = [1, 'some', 3.5, ['test', 7], True]
print(type(j))

j1 = list('hello')  # Из строки получаем набор итерируемых элементов
print(j, j1, sep='\n')

'''
Генераторы списков:
my_generator = (i [*2] for i in range(10) [if i != '5']) # операция с 'i' и условие [if] не обязательно
my_generator = (i*i for i in my_list [if i is not ' '])

my_sum = sum(i*i for i in range(10))  # сумма квадратов 0, 1, 4, ... 81

Списковые включения могут использовать вложенные итерации по переменным:
[(x, y) for x in range(1, 10) for y in range(1, 10) if x % y == 0]
'''

j2 = [i for i in 'hello']
print(j2)

# В чем удобство генераторов - в них можно добавлть условия:
# j3 = [i for i in 'hello world' if i != ' ']
j3 = [i for i in 'hello world' if i not in ['a', 'e', 'o', 'u', ' ']]
# Проитерируйся и выведи все символи, если они не равны символам из заданной последовательности(not in)
print(j3)
j3 = [i * 2 for i in 'hello world' if i not in ['a', 'e', 'o', 'u', ' ']]
# можно с i что нибдуь делать, например умножить на 2 и получить дубли символо
print(j3)

'''
Генератор чисел range - — неизменяемая последовательность целых чисел.
range(stop) | range(start, stop[, step]) -> range

start=0 : Целое число, которое должно явиться началом последовательности.
stop : Целое число, на котором должно завершиться формирование последовательности. Не входит в последовательность.
step=1 : Целое число — шаг, с которым должна формироваться последовательность. При попытке задать нуль - ValueError.
'''
print(list(range(10)))
print(list(range(1, 11)))
print(list(range(0, 10, 2)))

j4 = list(range(0, 5))
print(j4)

'''
Вкладываем циклы друг в друга:
напишем наглядный порядок отработки основного и вложенных циклов
'''
for i in range(1, 3):
    print(f'Внешний цикл №{i}')
    for j in range(1, 3):
        print(f'\tВнутренний цикл №{j}')  # добавим символ отступа (\t) для наглядности

print('\nТаблица умножения:')
for i in range(1, 10):
    print(f'\n{i}:')
    for j in range(2, 10):
        print(f'{i}*{j}={i * j}\t', end='')  # добавляем символ табуляции(\t) между и убираем перенос строки в конце
