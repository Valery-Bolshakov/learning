"""
HomeWork:

Task 1
Дан список words. Составьте из него список слов-палиндромов.
Попробуйте это сделать двумя способами: произвольное решение и решение в одну строчку кода.
"""

words = ['мадам', 'топот', 'test', 'madam', 'word']
new_word = []
for i in words:
    if i == i[::-1]:
        new_word.append(i)
print(f'Задача 1\n\tВариант 1: {new_word}')

words = ['asdFdsa', 'топот', 'test', 'madam', 'word']
new_word = [i for i in words if i == i[::-1]]
print(f'\tВариант 2: {new_word}\n')

'''
Task 2
Дан список my_str со строками, часть из которых являются палиндромами.
Составьте новый список строк-палиндромов.
my_str = ['Око за око', 'А роза упала на лапу Азора', 'Около Миши молоко']
'''

my_str = ['Око за око', 'А роза упала на лапу Азора', 'Около Миши молоко']
new_list = []
#print(my_str[0][::-1])
for i in my_str:
    i_replace = i.replace(' ', '').lower()  # ЦЕПОЧКА ВЫЗОВА МЕТОДОВ!!!!!!!!!!!!!!!!!!
    if i_replace == i_replace[::-1]:
        new_list.append(i)

print(new_list)


'''
Рассмотрим метож join: str.join(iterable) -> str. Где iterable : Объект со строками, поддерживающий итерирование.
Возвращает строку, собранную из элементов указанного объекта, поддерживающего итерирование.

    dots = '..'  # наша строка-соединитель
    my_new_str = dots.join(['1', '2'])  # '1..2'
    my_newest_str = dots.join('ab')  # 'a..b'
    
    # то же без отдельный переменной
    '..'.join(['1', '2'])  # '1..2'
    
Внимание!
Ожидается, что итерируемый объект выдаёт строки. Для массового приведения к строке можно 
воспользоваться функцией map(): dots.join(map(str, [100, 200])) # '100..200'
'''

l1 = list(range(1, 10))  # получим список чисел от 1 до 9ти
l2 = list('hello')
print(l1)

s = '-'.join(map(str, l1))  # Функция join работает только СО СТРОКОЙ, для того что бы итерируемый обьект привести
# к строчному значению применим функцию map
print(s)

s2 = ','.join(l2)
print(s2)







